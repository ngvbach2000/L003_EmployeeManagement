/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bachnv.ui;

import bachnv.dto.EmployeeDTO;
import bachnv.dto.EmployeeFullModel;
import bachnv.dao.EmployeeDAO;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

/**
 *
 * @author ngvba
 */
public class EmployeeManagement extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeManagement
     */
    EmployeeDAO data;
    ArrayList<EmployeeDTO> employee;
    EmployeeFullModel EmployeeModel;
    EmployeeFullModel SearchModel;
    SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");

    public EmployeeManagement() {
        initComponents();
        data = new EmployeeDAO();
        employee = new ArrayList<>();
        loadData();
        EmployeeModel = new EmployeeFullModel(employee);
        tblEmployee.setModel(EmployeeModel);
        tblEmployee.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void loadData() {
        employee.clear();
        for (int i = 0; i < data.size(); i++) {
            if (data.get(i).isIsDelete() == false) {
                employee.add(data.get(i));
            }
        }
    }

    private boolean validData() {

        String empID = txtEmpID.getText().trim();
        if (empID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input EmpID!");
            txtEmpID.requestFocus();
            return false;
        }
        if (!empID.matches("\\w{0,10}")) {
            JOptionPane.showMessageDialog(this, "EmpID max length is 10, not contains special characters!");
            txtEmpID.requestFocus();
            return false;
        }

        String fullname = txtFullname.getText().trim();
        if (fullname.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input Fullname!");
            txtFullname.requestFocus();
            return false;
        }
        if (!fullname.matches(".{0,30}")) {
            JOptionPane.showMessageDialog(this, "Fullname max length is 30!");
            txtFullname.requestFocus();
            return false;
        }

        String phone = txtPhone.getText().trim();
        if (phone.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input Phone!");
            txtPhone.requestFocus();
            return false;
        }
        if (!phone.matches("\\d{0,10}")) {
            JOptionPane.showMessageDialog(this, "Phone max length is 15, contain numeric characters only!");
            txtPhone.requestFocus();
            return false;
        }

        String email = txtEmail.getText().trim();
        if (email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input Email!");
            txtEmail.requestFocus();
            return false;
        }
        if (!email.matches("(\\w+@\\w+[.]?\\w*?[.]?\\w*?){0,30}")) {
            JOptionPane.showMessageDialog(this, "Email max length is 30, contain only one “@” character, "
                    + "do not contain special characters!");
            txtEmail.requestFocus();
            return false;
        }

        String address = txtAddress.getText().trim().replace("\n", "n");
        if (address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input Address!");
            txtAddress.requestFocus();
            return false;
        }
        if (!address.matches(".{0,300}")) {
            JOptionPane.showMessageDialog(this, "Address max length is 300!");
            txtAddress.requestFocus();
            return false;
        }

        String DOB = txtDOB.getText().trim();
        if (DOB.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input Date Of Birth!");
            txtDOB.requestFocus();
            return false;
        }
        if (!DOB.matches("(\\d{1,2})/(\\d{1,2})/(\\d{4})")) {
            JOptionPane.showMessageDialog(this, "Date of birth must be mm/dd/yyyy!");
            txtDOB.requestFocus();
            return false;
        }
        formatter.setLenient(false);
        if (formatter.parse(DOB, new ParsePosition(0)) == null) {
            JOptionPane.showMessageDialog(this, "Invalid Date!");
            txtDOB.requestFocus();
            return false;
        }

        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        txtFullname = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtDOB = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnGetAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Emp Management");

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblEmployeeMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblEmployee);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Emp's Detail:"));

        jLabel2.setText("EmpID:");

        jLabel3.setText("Fullname:");

        jLabel4.setText("Phone:");

        jLabel5.setText("Email:");

        jLabel6.setText("Address:");

        jLabel7.setText("DOB:");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane2.setViewportView(txtAddress);

        btnCreate.setText("Create Emp");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update Emp");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove Emp");
        btnRemove.setToolTipText("");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnFind.setText("Find by EmpID");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(txtEmpID)
                            .addComponent(txtFullname)
                            .addComponent(txtPhone)
                            .addComponent(txtEmail)
                            .addComponent(txtDOB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFind))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCreate)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnRemove))
                .addContainerGap())
        );

        btnGetAll.setText("Get All Emp");
        btnGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(btnGetAll)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGetAll)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        if (!validData()) {
            return;
        }
        try {
            String EmpID = txtEmpID.getText().trim();
            String Fullname = txtFullname.getText().trim();
            String Phone = txtPhone.getText().trim();
            String Email = txtEmail.getText().trim();
            String Address = txtAddress.getText().trim();
            Date DateOfBirth = formatter.parse(txtDOB.getText().trim());
            boolean IsDelete = false;
            EmployeeDTO dto = new EmployeeDTO(EmpID, Fullname, Phone, Email, Address, DateOfBirth, IsDelete);
            if (!data.checkCodeDuplicate(EmpID)) {
                JOptionPane.showMessageDialog(this, "Code is duplicate!");
                return;
            }
            if (data.createEmployee(dto)) {
                JOptionPane.showMessageDialog(this, "Create successful!");
                tblEmployee.clearSelection();
                txtEmpID.setText("");
                txtFullname.setText("");
                txtPhone.setText("");
                txtEmail.setText("");
                txtAddress.setText("");
                txtDOB.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Create fail");
            }
        } catch (ParseException ex) {
            Logger.getLogger(EmployeeManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadData();
        tblEmployee.updateUI();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (tblEmployee.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select row to update!");
            return;
        }
        if (!validData()) {
            return;
        }
        try {
            String EmpID = txtEmpID.getText().trim();
            String Fullname = txtFullname.getText().trim();
            String Phone = txtPhone.getText().trim();
            String Email = txtEmail.getText().trim();
            String Address = txtAddress.getText().trim();
            Date DateOfBirth = formatter.parse(txtDOB.getText().trim());
            boolean IsDelete = false;
            EmployeeDTO dto = new EmployeeDTO(EmpID, Fullname, Phone, Email, Address, DateOfBirth, IsDelete);
            if (data.updateEmployee(dto)) {
                JOptionPane.showMessageDialog(this, "Update successful!");
                txtEmpID.setEditable(true);
                tblEmployee.clearSelection();
                txtEmpID.setText("");
                txtFullname.setText("");
                txtPhone.setText("");
                txtEmail.setText("");
                txtAddress.setText("");
                txtDOB.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Update fail");
            }
        } catch (ParseException ex) {
            Logger.getLogger(EmployeeManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadData();
        tblEmployee.updateUI();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if (tblEmployee.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select row to delete!");
            return;
        }
        try {
            String EmpID = txtEmpID.getText().trim();
            int r = JOptionPane.showConfirmDialog(this, "Do you want to remove employee " + EmpID + "?", "Delete", JOptionPane.YES_NO_OPTION);
            if (r == JOptionPane.YES_OPTION) {
                if (data.deleteEmployee(EmpID)) {
                    JOptionPane.showMessageDialog(this, "Delete successful!");
                    tblEmployee.clearSelection();
                    txtEmpID.setEditable(true);
                    txtEmpID.setText("");
                    txtFullname.setText("");
                    txtPhone.setText("");
                    txtEmail.setText("");
                    txtAddress.setText("");
                    txtDOB.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Delete fail");
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(EmployeeManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadData();
        tblEmployee.updateUI();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllActionPerformed
        EmployeeModel = new EmployeeFullModel(employee);
        tblEmployee.setModel(EmployeeModel);
        loadData();
        txtEmpID.setEditable(true);
        tblEmployee.clearSelection();
        txtEmpID.setText("");
        txtFullname.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
        txtAddress.setText("");
        txtDOB.setText("");
    }//GEN-LAST:event_btnGetAllActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        String id = txtEmpID.getText().trim();
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please input EmpID!");
            txtEmpID.requestFocus();
            return;
        }
        EmployeeDTO find = data.findByEmpID(id);
        if (find != null) {
            txtEmpID.setText(find.getEmpID());
            txtFullname.setText(find.getFullname());
            txtPhone.setText(find.getPhone());
            txtEmail.setText(find.getEmail());
            txtAddress.setText(find.getAddress());
            txtDOB.setText(formatter.format(find.getDateOfBirth()));
            for (int i = 0; i < employee.size(); i++) {
                if (find.getEmpID().equals(EmployeeModel.getEmployee().get(i).getEmpID())) {
                    tblEmployee.setRowSelectionInterval(i, i);
                }
            }
            txtEmpID.setEditable(false);
        } else {
            JOptionPane.showMessageDialog(this, "No result!");
            txtEmpID.requestFocus();
            txtEmpID.setEditable(true);
            tblEmployee.clearSelection();
            txtFullname.setText("");
            txtPhone.setText("");
            txtEmail.setText("");
            txtAddress.setText("");
            txtDOB.setText("");
        }
        loadData();
        tblEmployee.updateUI();
    }//GEN-LAST:event_btnFindActionPerformed

    private void tblEmployeeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEmployeeMouseReleased
        txtEmpID.setEditable(false);
        int pos = tblEmployee.getSelectedRow();
        String id = employee.get(pos).getEmpID();
        EmployeeDTO click = data.findByEmpID(id);
        if (click != null) {
            txtEmpID.setText(click.getEmpID());
            txtFullname.setText(click.getFullname());
            txtPhone.setText(click.getPhone());
            txtEmail.setText(click.getEmail());
            txtAddress.setText(click.getAddress());
            txtDOB.setText(formatter.format(click.getDateOfBirth()));
        }
    }//GEN-LAST:event_tblEmployeeMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() == 2) {
            txtEmpID.setEditable(true);
            tblEmployee.clearSelection();
            txtEmpID.setText("");
            txtFullname.setText("");
            txtPhone.setText("");
            txtEmail.setText("");
            txtAddress.setText("");
            txtDOB.setText("");
        }
    }//GEN-LAST:event_formMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int r = JOptionPane.showConfirmDialog(this, "Do you want to exit without saving?", "Exit", JOptionPane.YES_NO_OPTION);
        if (r == JOptionPane.YES_OPTION) {
            System.exit(0);
        } else {
            this.setDefaultCloseOperation(this.DO_NOTHING_ON_CLOSE);
            return;
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagement.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnGetAll;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextField txtFullname;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
